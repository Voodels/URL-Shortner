# ============================================================================
# Complete Stack - Application + Monitoring
# ============================================================================
#
# PURPOSE: One-command deployment of entire stack
# USAGE:
#   Start: docker-compose -f docker-compose.full.yml up -d
#   Stop:  docker-compose -f docker-compose.full.yml down
#   Logs:  docker-compose -f docker-compose.full.yml logs -f
#
# SERVICES:
#   Application:
#     - mysql (port 3307)
#     - backend (port 8000)
#     - frontend (port 80)
#     - adminer (port 8081) [optional]
#
#   Monitoring:
#     - prometheus (port 9091)
#     - grafana (port 3002)
#     - loki (port 3101)
#     - promtail
#
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # MySQL Database
  # ==========================================================================
  mysql:
    image: mysql:8.0
    container_name: urlshortener-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: urlshortener
      MYSQL_USER: urlshortener
      MYSQL_PASSWORD: urlshortener
      MYSQL_INITDB_SKIP_TZINFO: 1
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - url-shortener-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ==========================================================================
  # Backend API Server
  # ==========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: urlshortener-backend
    restart: unless-stopped
    environment:
      PORT: 8000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: urlshortener
      DB_PASSWORD: urlshortener
      DB_NAME: urlshortener
      JWT_SECRET: hKj9mP3vL8qN2wR5tY6uI1oP4sA7dF0gH3jK6lM9nB2cV5xZ8
      ALLOWED_ORIGINS: http://localhost,http://localhost:80,http://frontend
      LOG_REQUESTS: "true"
      NODE_ENV: production
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "deno", "eval", "fetch('http://localhost:8000/health').then(r => r.ok ? Deno.exit(0) : Deno.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - url-shortener-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ==========================================================================
  # Frontend React Application
  # ==========================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: urlshortener-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - url-shortener-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ==========================================================================
  # Adminer - Database Management UI (Optional)
  # ==========================================================================
  adminer:
    image: adminer:latest
    container_name: urlshortener-adminer
    restart: unless-stopped
    profiles:
      - debug
    ports:
      - "8081:8080"
    networks:
      - url-shortener-network
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: mysql

  # ==========================================================================
  # Prometheus - Metrics Collection
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: urlshortener-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - url-shortener-network

  # ==========================================================================
  # Grafana - Visualization
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: urlshortener-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - url-shortener-network
    depends_on:
      - prometheus

  # ==========================================================================
  # Loki - Log Aggregation
  # ==========================================================================
  loki:
    image: grafana/loki:latest
    container_name: urlshortener-loki
    restart: unless-stopped
    ports:
      - "3101:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - url-shortener-network

  # ==========================================================================
  # Promtail - Log Collector
  # ==========================================================================
  promtail:
    image: grafana/promtail:latest
    container_name: urlshortener-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - url-shortener-network
    depends_on:
      - loki

# ============================================================================
# Networks
# ============================================================================
networks:
  url-shortener-network:
    driver: bridge
    name: urlshortener-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  mysql_data:
    driver: local
    name: urlshortener-mysql-data
  prometheus_data:
    driver: local
    name: urlshortener-prometheus-data
  grafana_data:
    driver: local
    name: urlshortener-grafana-data
  loki_data:
    driver: local
    name: urlshortener-loki-data

# ============================================================================
# QUICK START GUIDE
# ============================================================================
#
# 1. Start everything:
#    docker-compose -f docker-compose.full.yml up -d
#
# 2. Check status:
#    docker-compose -f docker-compose.full.yml ps
#
# 3. View logs:
#    docker-compose -f docker-compose.full.yml logs -f
#    docker-compose -f docker-compose.full.yml logs -f backend
#
# 4. Stop everything:
#    docker-compose -f docker-compose.full.yml down
#
# 5. Stop and remove all data:
#    docker-compose -f docker-compose.full.yml down -v
#
# 6. Rebuild and restart:
#    docker-compose -f docker-compose.full.yml up -d --build
#
# 7. Start with Adminer (database UI):
#    docker-compose -f docker-compose.full.yml --profile debug up -d
#
# ============================================================================
# ACCESS URLS
# ============================================================================
#
# Frontend:    http://localhost
# Backend API: http://localhost:8000
# Health:      http://localhost:8000/health
# Grafana:     http://localhost:3002 (admin/admin)
# Prometheus:  http://localhost:9091
# Loki:        http://localhost:3101
# Adminer:     http://localhost:8081 (with --profile debug)
# MySQL:       localhost:3307
#
# ============================================================================
# MONITORING SETUP
# ============================================================================
#
# 1. Open Grafana: http://localhost:3002
# 2. Login: admin/admin
# 3. Add Prometheus data source:
#    - URL: http://prometheus:9090
# 4. Add Loki data source:
#    - URL: http://loki:3100
# 5. Import dashboards or create your own
#
# ============================================================================
